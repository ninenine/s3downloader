name: Build and Release

on:
  push:
    tags:
      - "v*.*.*" # triggers the workflow for version tags like v1.0.0

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    # Removed continue-on-error to ensure a failing build blocks release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]
        exclude:
          - os: ubuntu-latest
            arch: arm64
          - os: windows-latest
            arch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev xorg-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install glfw

      - name: Install fyne
        run: go install fyne.io/fyne/v2/cmd/fyne@latest

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          GOOS=linux GOARCH=${{ matrix.arch }} fyne package \
            -sourceDir ./cmd \
            -name "s3downloader" \
            -os linux \
            -icon ./cmd/icon.png \
            -appID com.ninenine.s3downloader \
            -release

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: |
          $env:GOOS = "windows"
          $env:GOARCH = "${{ matrix.arch }}"
          fyne package `
            -sourceDir ./cmd `
            -name "s3downloader" `
            -os windows `
            -icon .\cmd\icon.png `
            -appID com.ninenine.s3downloader `
            -release

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: |
          GOOS=darwin GOARCH=${{ matrix.arch }} fyne package \
            -sourceDir ./cmd \
            -name "s3downloader" \
            -os darwin \
            -icon ./cmd/icon.png \
            -appID com.ninenine.s3downloader \
            -release

      - name: Compress Linux build
        if: matrix.os == 'ubuntu-latest'
        run: |
          # The Fyne package output is typically s3downloader.tar.xz
          # Rename it to an OS/arch-specific filename
          mv s3downloader.tar.xz s3downloader-linux-${{ matrix.arch }}.tar.xz

      - name: Compress Windows build
        if: matrix.os == 'windows-latest'
        run: |
          # Package produces s3downloader.exe
          Compress-Archive -Path s3downloader.exe -DestinationPath s3downloader-windows-${{ matrix.arch }}.zip

      - name: Compress macOS build
        if: matrix.os == 'macos-latest'
        run: |
          # Package produces s3downloader.app
          tar -cvJf s3downloader-macos-${{ matrix.arch }}.tar.xz s3downloader.app

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: s3downloader-${{ matrix.os }}-${{ matrix.arch }}
          path: s3downloader-*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    # Only release if the build job succeeded
    if: success()
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts
          asset_name: "s3downloader_build_artifacts"
          asset_content_type: application/octet-stream
