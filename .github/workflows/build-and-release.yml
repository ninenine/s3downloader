name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev xorg-dev
        continue-on-error: true

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install gcc glfw
        continue-on-error: true

      - name: Install fyne
        run: go install fyne.io/fyne/v2/cmd/fyne@latest
        continue-on-error: true

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          GOOS=linux GOARCH=${{ matrix.arch }} fyne package -sourceDir ./cmd -name "s3downloader" -os linux -icon ../icon.png -appID com.ninenine.s3downloder -release
        continue-on-error: true

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: |
          $env:GOOS = "windows"
          $env:GOARCH = "${{ matrix.arch }}"
          fyne package -sourceDir ./cmd -name "s3downloader" -os windows -icon ../icon.png -appID com.ninenine.s3downloder -release
        continue-on-error: true

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: |
          GOOS=darwin GOARCH=${{ matrix.arch }} fyne package -sourceDir ./cmd -name "s3downloader" -os darwin -icon ../icon.png -appID com.ninenine.s3downloder -release
        continue-on-error: true

      - name: Compress Linux build
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar -cvJf s3downloader-linux-${{ matrix.arch }}.tar.xz *.exe *.so *.dll *.bin *.pkg

      - name: Compress Windows build
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path *.exe, *.dll, *.bin, *.pkg -DestinationPath s3downloader-windows-${{ matrix.arch }}.zip

      - name: Compress macOS build
        if: matrix.os == 'macos-latest'
        run: |
          tar -cvJf s3downloader-macos-${{ matrix.arch }}.tar.xz *.app *.dylib *.pkg

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: s3downloader-${{ matrix.os }}-${{ matrix.arch }}
          path: s3downloader-*.tar.xz, s3downloader-*.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: always() # Ensure this job runs even if the build job fails
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts
          asset_name: s3downloader-${{ runner.os }}-${{ runner.arch }}
          asset_content_type: application/octet-stream
