name: Go Release

on:
  push:
    tags:
      - "v*.*.*" # Triggers the workflow for version tags like v1.0.0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        goarch: [amd64, arm64]
        exclude:
          - os: windows-latest
            goarch: arm64
          - os: macos-latest
            goarch: amd64
          - os: ubuntu-latest
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev xorg-dev

      - name: Install system dependencies (macOS only)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install glfw || true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Build application
        env:
          GOOS: ${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'darwin' || 'linux' }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -o s3downloader-${{ runner.os }}-${{ matrix.goarch }}${{ runner.os == 'Windows' && '.exe' || '' }} cmd/main.go

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: s3downloader-${{ runner.os }}-${{ matrix.goarch }}
          path: s3downloader-${{ runner.os }}-${{ matrix.goarch }}${{ runner.os == 'Windows' && '.exe' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: success() || failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs').promises;
            const assets = glob.sync('s3downloader-*');
            for (const asset of assets) {
              try {
                const data = await fs.readFile(asset);
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: ${{ steps.create_release.outputs.id }},
                  name: asset,
                  data: data
                });
                console.log(`Successfully uploaded ${asset}`);
              } catch (error) {
                console.error(`Failed to upload ${asset}: ${error.message}`);
              }
            }
